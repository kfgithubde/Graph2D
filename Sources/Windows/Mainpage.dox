/*! \mainpage Plot10 & Advanced Graphing II
\~german

Graph2D ist vollständig in FTN77 und ANSI C90 geschrieben. Ursprünglich mit dem Open Watcom Compiler entwickelt,
wird jetzt zusätzlich die MINGW/GCC beruecksichtigt. So wird eine Verwendung zusammen mit in 
moderneren Fortranversionen geschriebenen Hauptprogrammen ermöglicht.
\n\n

### Erstellung der Graphikbibliothek:
Nach Kopieren der Quelldateien durch "$getfiles.bat win32 (win16, gnu32, gnu64...)" in das /build Unterverzeichnis befinden 
sich dort auch die Projektdateien für die OpenWatcom- bzw. CodeBlocks-IDE.
\n\n

### Verwendung der Graphikbibliothek:
Die Haupteigenschaften können folgendermaßen angepasst werden:
- Initialisierung: Durch Aufruf des Unterprogrammes WINLBL, der Registry oder *.ini/*.xml-Dateien
- Icons: Durch Linken einer Resource oder mithilfe von Initialisierungsdateien
\n\n

### Hardcopies
werden standardmäßig als *.wmf ausgegeben, es können jedoch andere Formate vor der Compilierung konfiguriert werden. 

\page "Compilersetup und Fremdbibliotheken"
## Setup der Entwickungsumgebung
### Open Source Bibliotheken
Die Erzeugung und das Abspeichern der OpenSource Bibliotheken in /OpenContent/binaries/... ist nur einmalig bei Verwendung eines neuen Compilers notwendig.

Im Falle von sglib handelt es sich um eine Makrobibliothek ohne Notwendigkeit eines "make":
- Kopieren der Datei "sglib.h" in die /include-Verzeichnisse.
- Kopieren von "index.html" -> TekLib\OpenContent\docs\sglib
\n\n

### OpenWatcom für Windows 16bit und 32bit
#### Grundkonfiguration der Entwicklungsumgebung 
Erstellung des Verzeichnisses C:\UsrProg\Watcom und anschließend "als Administrator ausführen" von open-watcom-2_0-c-win-x64.exe und open-watcom-2_0-f77-win-x64.exe mit den Optionen 
- 16bit Compiler: Alles
- 32bit Compiler: Alles
- Target: DOS, Win16, Win NT
- Host: Win 64
- Toolkit: Alles

#### Erzeugen der miniXML Bibliothek:
- Entpacken von mxml-x.y.zip nach \build
- Kopieren von OpenContent\MiniXMLlib\OpenWatcom\*.* nach \build
- Erzeugen der statischen Library durch mxml1.wpj und der dynamischen Version durch mxml1d.wpj
- Kopieren von \build:\n
   mxml.h -> TekLib\OpenContent\binaries\Watcom\include\n
   mxml1.lib\n 
   !!! Achtung, DLL nur eingeschränkt nutzbar: Fehler bei Dateioperationen "Unable to read XML file with default callback." !!!\n
   mxml1d.lib, mxml1d.dll ->TekLib\OpenContent\binaries\Watcom\lib\n
- Kopieren der Dokumentation von \build\doc:\n
   mxml.html, mxml-cover.png -> TekLib\OpenContent\docs\Mini-XML
\n\n

### MingGW(TDM und CodeBlocks) für Windows 32bit und 64bit
#### Grundkonfiguration der Entwicklungsumgebung 
Es werden beide TDM-Toolchains (32bit und 64bit) installiert (z.B. nach C:\UsrProg\TDM-GCC-64 und C:\UsrProg\TDM-GCC-32). Dann in CodeBlocks unter
Settings -> Compiler  bei Selected Compiler folgende Einträge vornehmen:
- GNU GCC Compiler:\n 
"Compiler Settings" -> "Compiler Flags" General\Target 64bit [-m64]\n
" Toolchain executables" : C:\UsrProg\TDM-GCC-64
- GNU Fortran Compiler:\n
"Compiler Settings" -> "Other Compiler options": -m64\n
"Toolchain executables" : C:\UsrProg\TDM-GCC-64

Zur Erzeugung der 32bit Version müssen lediglich die Globalen GCC Settings entsprechend geändert werden. Die 32-bit-Einstellungen werden in CodeBlocks als neue Compiler definiert und entsprechend in den Projektdateien bei SDL32 und SDL64 unterschieden.

#### Erzeugen der miniXML Bibliothek:
MiniXML: Die Kompilierung erfolgt innerhalb eines MSYS-Terminals, jeweils für 32- und 64-bit getrennt.
- Entpacken von mxml-x.y.zip
- $ cd /home/mxml-x.y
- $ ./configure --help 
- Für 32bit: $ ./configure --build=mingw32\n
  Für 64bit: $ ./configure --build=mingw64\n 
- Manuelles Einfügen des flags -lssp durch $ nano makefile:\n
  LIBS		=	-lpthread -lssp 
- $ make
- $ make test
- $ exit
- Kopieren (unter Windows):\n
  mxml.h -> TekLib\OpenContent\binaries\gcc\include\n
  libmxml.a, (libmxml1.a, mxml1.dll) ->TekLib\OpenContent\binaries\gcc\lib\n
- Kopieren der Dokumentation:\n
  mxml.html, mxml-cover.png -> TekLib\OpenContent\docs\Mini-XML

\~english

Graph2D is written entirely in FTN77 and ANSI C90. Initially it was developed using the Open Watcom compiler.
Now the MINGW-GCC is used additionally to allow linking against applications written in modern Fortran. 
\n\n

### How to build the library:
Copy the sources into the /build subdirectory by running "$$getfiles.bat win32 (win16, gnu32, gnu64...)" and then use the workspace files.
\n\n
  
### Using the library:
After building the library and linking it to an application, the main features can be changed by the following files: 
- Initialization: by calling the WINLBL subroutine, editing the registry or by *.ini/*.xml files 
- Icons: by linking to a resource or using *.ini-files
\n\n

### Hardcopies
By default *.wmf hardcopies are used, but other formats can be configured before compiling the package.

\page "Compiler setup and foreign libraries"
## Setting up the IDE
### Open source libraries
Building and storing of the binaries in /OpenContent/binaries/... is only necessary once, and only when using a new compiler.

sglib is a macro library, no compilation is required:
- Copy the file "sglib.h" into the /include directories.
- Copy the file "index.html" -> TekLib\OpenContent\docs\sglib
\n\n

### OpenWatcom for Windows 16bit and 32bit
#### Basic configuration of the IDE
Create the directory C:\UsrProg\Watcom and then "Run as Administrator" open-watcom-2_0-c-win-x64.exe and open-watcom-2_0-f77-win-x64.exe with the following options 
- 16bit compiler: All
- 32bit compiler: All
- Target: DOS, Win16, Win NT
- Host: Win 64
- Toolkit: All

#### Build the miniXML library:
- Unzip mxml-x.y.zip to \build
- Copy OpenContent\MiniXMLlib\OpenWatcom\*.* to \build
- Build the static version with mxml1.wpj and the DLL-version with mxml1d.wpj
- Copy from \build:\n
   mxml.h -> TekLib\OpenContent\binaries\Watcom\include\n
   mxml1.lib\n 
   !!! Caution, DLL is only of limited use: Erroneous file operations "Unable to read XML file with default callback." !!!\n
   mxml1d.lib, mxml1d.dll ->TekLib\OpenContent\binaries\Watcom\lib\n
- Copy the documentation from \build\doc:\n
   mxml.html, mxml-cover.png -> TekLib\OpenContent\docs\Mini-XML
\n\n

### MingGW (TDM and CodeBlocks) for Windows 32bit and 64bit
#### Basic configuration of the IDE
Install both TDM toolchains, for 32-bit and for 64-bit (e.g. in C:\UsrProg\TDM-GCC-64 and C:\UsrProg\TDM-GCC-32). 
Then edit the following entries in CodeBlocks at Settings -> Compiler:
- GNU GCC Compiler:\n 
"Compiler Settings" -> "Compiler Flags" General\Target 64bit [-m64]\n
"Toolchain executables": C:\UsrProg\TDM-GCC-64
- GNU Fortran Compiler:\n
"Compiler Settings" -> "Other Compiler options": -m64\n
"Toolchain executables" : C:\UsrProg\TDM-GCC-64

To build 32bit programs the global GCC settings must be changed accordingly. The 32bit settings define new compilers and can now be distinguished from the 64bit versions when used within the 32bit workspaces.

#### Building the miniXML library
MiniXML: The compilation uses an MSYS terminal, seperately for 32- and 64-bit.
- Unzip mxml-x.y.zip
- $ cd /home/mxml-x.y
- $ ./configure --help 
- For 32bit: $ ./configure --build=mingw32\n
  For 64bit: $ ./configure --build=mingw64\n 
- Edit makefile and add the following flags:\n
  LIBS		=	-lpthread -lssp 
- $ make
- $ make test
- $ exit
- Copy (in MS Windows):\n
  mxml.h -> TekLib\OpenContent\binaries\gcc\include\n
  libmxml.a, (libmxml1.a, mxml1.dll) ->TekLib\OpenContent\binaries\gcc\lib\n
- Copy the documentation:\n
  mxml.html, mxml-cover.png -> TekLib\OpenContent\docs\Mini-XML
\~
*/
